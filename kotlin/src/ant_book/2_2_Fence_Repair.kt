package ant_book

fun main(args: Array<String>) {
    val n = readLine()!!.toInt()
    var l = readLine()!!.split(" ").map { it.toLong() }

    // 21 -> 13, 8 = 21
    // 13 -> 5,  8 = 13
    // 合計: 34

    // 21 -> 5, 16 = 21
    // 16 -> 8,  8 = 16
    // 合計: 37

    // 切った残りの板をまた切るとき、より短い板になっている方がコストが小さくなる
    // つまり目的の長さの大きいものから切り出していけば良い

//    l = l.sortedDescending()
//
//    var len = l.sum()
//
//    var ans = 0L
//    for (i in 0 until n - 1) {
//        ans += len
//        len -= l[i]
//    }
//    println(ans)

    // と思ったがこれは罠で、
    // ↓みたいな時がダメ

    // 長いのから切り出していくと合計コスト=33
    // 12 -> 9, 3 = 12
    //  9 -> 6, 3 = 9
    //  6 -> 4, 2 = 6
    //  4 -> 2, 2 = 4
    //  2 -> 1, 1 = 2

    // 最適解の合計コスト=30
    // 12 -> 7, 5 = 12
    //  7 -> 4, 3 = 7
    //  5 -> 2, 3 = 5
    //  4 -> 2, 2 = 4
    //  2 -> 1, 1 = 2


}