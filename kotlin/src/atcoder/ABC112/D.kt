package atcoder.ABC112

fun main(args: Array<String>) {
//    整数N,Mが与えられる
//    a1 + a2 + ... + aN = Mとなる正整数からなる長さNの数列aにおいて、
//    a1, a2, ..., aNの最大公約数の取りうる最大値を求めよ
//
//    制約
//    ・入力はすべて整数
//    ・a <= N <= 10^5
//    ・N <= M <= 10^9

//    a1, a2, ..., aNの最大公約数をDとする。
//    当然、Dが最大公約数であるのでa1, a2, ... , aNはそれぞれDの倍数である。
//    よって、数列の総和であるMもDの倍数ということになる。
//    つまり、求める最大公約数はMも約数である。
//    これだけだと候補が多すぎるので、さらに範囲を絞る。
//
//    求めるべき最大公約数DはMの約数であり、a1, a2, ... , aNのすべての約数でもある。
//    Dが約数だということは、
//    a1, a2, ... , aN >= Dなので、(すべての項はDの1倍以上の数)
//    a1 + a2 + ... + aN = M >= N*Dになる。(Dを約数にもつN個の項の総和Mは、N個のD以上になる)
//    つまり、D >= M/NとなりDの上限はM/Nだとわかる。
//    あとは、大きいほうからM/Nに一番近いMの約数を探せばよい。


    val (n, m) = readLine()!!.split(" ").map(String::toInt)

    for (d in (m/n) downTo 1) {
        if (m % d == 0) {
            println(d)
            return
        }
    }
}
