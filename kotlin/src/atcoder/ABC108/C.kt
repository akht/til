package atcoder.ABC108

fun main(args: Array<String>) {
    // まず、「a + b, b + c, c + aがKで割り切れる」を合同式で表すと。
    //     a + b ≡ 0 (mod K)
    //     b + c ≡ 0
    //     c + a ≡ 0
    // となる。
    //
    // この3式を足したり引いたりすると次のようになる。
    //     2a ≡ 0 (mod K)
    //     2b ≡ 0
    //     2c ≡ 0
    //
    // ここで、2とKが互いに素ならば、aはKの倍数ということになる。
    // (Kでは2のほうを割れないので)
    // 2とKが互いに素であるためには、Kは奇数でなければならないので
    // Kが奇数の場合と偶数の場合に分けて考える。
    //
    // i) Kが奇数のとき
    // 2とKは互いに素なので、a, b, cはKの倍数でなければならない。
    // つまり、
    //     a ≡ b ≡ c ≡ 0 (mod K)
    // ということになる。
    // よって、K以下のKの倍数を数えて3乗すればよい。
    //
    // ii) Kが偶数のとき
    // K = 2K'とおくと、2aは2K'で割り切れるのでaはK'で割り切れる。
    // つまり、
    //     a ≡ 0 (mod K')
    //     b ≡ 0
    //     c ≡ 0
    // である。
    // ここで a ≡ b ≡ c ≡ 0 (mod K')と考えてしまいそうになるが
    // それは間違っている。
    // まず、
    //     a ≡ 0 (mod K') <=> a ≡ 0 または K' (mod K)
    // であることに注意する。
    //   例えばK = 6のとき、K' = 3なので、aは3の倍数となる。
    //   つまりa(3の倍数)を6で割った余りは、0か3になる。
    // a ≡ b ≡ c (mod K)なので
    //     a ≡ b ≡ c ≡ 0 (mod K) または a ≡ b ≡ c ≡ K' (mod K)
    // であることが言える。
    // これは
    //     a ≡ b ≡ c ≡ 0 (mod K')
    // とは違う。
    // これだと、
    //     a ≡ 0 (mod K)
    //     b ≡ 0
    //     c ≡ K'
    // のうようなケースも含んでしまうが、
    // 1番目と3番目の合同式を足すとc + a ≡ K' (mod K)となってしまい、Kの倍数になっていない。
    // (問題の条件を満たさない)
    //
    // 以上より、kが偶数の場合は
    //    N以下のKの倍数の個数をx
    //    N以下のKで割ってK'(=k/2)あまる整数の個数をy
    // とすると、x^3 + y^3となる。


    val (N, K) = readLine()!!.split(" ").map(String::toLong)

    if (K % 2 == 0L) {
        var x = N / K
        var y = (N + K/2) / K
        println(x * x * x + y * y * y)
    } else {
        var x = N / K
        println(x * x * x)
    }
}